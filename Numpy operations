{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d38a3e8-f754-4f17-8d73-ee7dc0e04eda",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m arr1 \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marange(\u001b[38;5;241m4\u001b[39m, dtype \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mfloat_)\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m2\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "arr1 = np.arange(4, dtype = np.float_).reshape(2, 2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "43d21500-8453-4e6c-b740-f4c71d42af18",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a92c682-4fb4-4e74-8b11-38464872f601",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr1 = np.arange(4, dtype = np.float_).reshape(2, 2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4aa8b540-2ac6-47a0-af04-3c2ac12b7c87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 1.]\n",
      " [2. 3.]]\n"
     ]
    }
   ],
   "source": [
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e964b762-f1ff-4597-9d7d-66ca6a020e02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Second array:\n",
      "[12 12]\n"
     ]
    }
   ],
   "source": [
    "print('\\nSecond array:') \n",
    "arr2 = np.array([12, 12]) \n",
    "print(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "15e133e8-6f18-4330-9321-c0a7195055aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Adding the two arrays:\n",
      "[[12. 13.]\n",
      " [14. 15.]]\n"
     ]
    }
   ],
   "source": [
    "print('\\nAdding the two arrays:') \n",
    "print(np.add(arr1, arr2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5748be3a-0de3-4b7a-b8e5-7de358d2372e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Subtracting the two arrays:\n",
      "[[-12. -11.]\n",
      " [-10.  -9.]]\n"
     ]
    }
   ],
   "source": [
    "print('\\nSubtracting the two arrays:') \n",
    "print(np.subtract(arr1, arr2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "041a082b-c084-4e05-8930-001145b696ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Multiplying the two arrays:\n",
      "[[ 0. 12.]\n",
      " [24. 36.]]\n"
     ]
    }
   ],
   "source": [
    "print('\\nMultiplying the two arrays:')\n",
    "print(np.multiply(arr1, arr2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8be02460-7abb-4bd8-98d0-5b43fd34e25c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Dividing the two arrays:\n",
      "[[0.         0.08333333]\n",
      " [0.16666667 0.25      ]]\n"
     ]
    }
   ],
   "source": [
    "print('\\nDividing the two arrays:')\n",
    "print(np.divide(arr1, arr2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0474b67c-3843-42be-ba6d-4b0c5d8afb74",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "arr = np.array([25, 1.33, 1, 1, 100]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d10e44c1-4e70-4d86-9d0f-f8038a6b5a63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our array is:\n",
      "[ 25.     1.33   1.     1.   100.  ]\n"
     ]
    }
   ],
   "source": [
    "print('Our array is:')\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21208a06-ccd1-4f5b-a056-f8b87e3f1c26",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c96f0cba-29f8-4db9-958f-42cbd73d35d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "After applying reciprocal function:\n",
      "[0.04      0.7518797 1.        1.        0.01     ]\n"
     ]
    }
   ],
   "source": [
    "print('\\nAfter applying reciprocal function:') \n",
    "print(np.reciprocal(arr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d0592993-727f-46c4-a342-f7e87894d2b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The second array is:\n",
      "[25]\n"
     ]
    }
   ],
   "source": [
    "arr2 = np.array([25], dtype = int)\n",
    "print('\\nThe second array is:')\n",
    "print(arr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "933e2e36-e4ee-47cc-a248-fa721a0b8b31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "After applying reciprocal function:\n",
      "[0]\n"
     ]
    }
   ],
   "source": [
    "print('\\nAfter applying reciprocal function:') \n",
    "print(np.reciprocal(arr2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6ee581d2-338d-4a37-9df2-fcc04adc2008",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First array is:\n",
      "[ 5 10 15]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr = np.array([5, 10, 15]) \n",
    " \n",
    "print('First array is:') \n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9f1dfb6b-108f-476c-a1f8-829fbffc57fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Applying power function:\n",
      "[ 25 100 225]\n"
     ]
    }
   ],
   "source": [
    "print('\\nApplying power function:') \n",
    "print(np.power(arr, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9a147894-ecb0-4b01-be8b-645d1c044950",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Second array is:\n",
      "[1 2 3]\n"
     ]
    }
   ],
   "source": [
    "print('\\nSecond array is:') \n",
    "arr1 = np.array([1, 2, 3]) \n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f1d7f0f2-3fd6-4eae-84ac-39e932d76fe5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Applying power function again:\n",
      "[   5  100 3375]\n"
     ]
    }
   ],
   "source": [
    "print('\\nApplying power function again:') \n",
    "print(np.power(arr, arr1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a0f332b8-bfdb-4b22-ab9d-283120caf634",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = np.array([5, 15, 20]) \n",
    "arr1 = np.array([2, 5, 9]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "15d0edfd-0b64-4889-9aa2-c25f3e271ae8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First array:\n",
      "[ 5 15 20]\n"
     ]
    }
   ],
   "source": [
    "print('First array:') \n",
    "print(arr) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "17f4ac2f-4e76-4500-9b56-8ac9fbfbf38d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Second array:\n",
      "[2 5 9]\n"
     ]
    }
   ],
   "source": [
    "print('\\nSecond array:') \n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c6756055-d516-4f09-8827-bbfec960e690",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Applying mod() function:\n",
      "[1 0 2]\n"
     ]
    }
   ],
   "source": [
    "print('\\nApplying mod() function:') \n",
    "print(np.mod(arr, arr1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "adef84e9-c659-41ac-8553-a9e507363a79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Applying remainder() function:\n",
      "[1 0 2]\n"
     ]
    }
   ],
   "source": [
    "print('\\nApplying remainder() function:') \n",
    "print(np.remainder(arr, arr1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dbdc78c8-d101-4a46-8ae2-8e93f2f057e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "49bb77ea-0f5e-4254-9e96-e4a633e79762",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['geeks', 'for', 'geeks']\n"
     ]
    }
   ],
   "source": [
    "print(np.char.split('geeks for geeks'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "85dcaa42-3521-4b6f-a118-65b3445d4695",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['geeks', ' for', ' geeks']\n"
     ]
    }
   ],
   "source": [
    "print(np.char.split('geeks, for, geeks', sep = ','))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30fc1fbe-a330-4678-9d8b-ebae7b7feae2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
